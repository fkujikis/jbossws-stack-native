// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package org.jboss.test.ws.interop.microsoft.addressing.wsa10;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class Notify_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements org.jboss.test.ws.interop.microsoft.addressing.wsa10.Notify {
    
    
    
    /*
     *  public constructor
     */
    public Notify_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://131.107.72.15/WSAddressingCR_Service_WCF/WSAddressing10.svc/Soap11");
    }
    
    
    /*
     *  implementation of notify
     */
    public void notify(java.lang.String notify)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(Notify_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_Notify_notify_QNAME);
            _bodyBlock.setValue(notify);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://example.org/action/notify");
            
            _sendOneWay((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            } catch (RemoteException e) {
                // let this one through unchanged
                throw e;
            } catch (JAXRPCException e) {
                throw new RemoteException(e.getMessage(), e);
            } catch (Exception e) {
                if (e instanceof RuntimeException) {
                    throw (RuntimeException)e;
                } else {
                    throw new RemoteException(e.getMessage(), e);
                }
            }
        }
        
        
        /*
         *  this method deserializes the request/response structure in the body
         */
        protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
            int opcode = state.getRequest().getOperationCode();
            switch (opcode) {
                default:
                    throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
            }
        }
        
        
        
        
        
        
        protected java.lang.String _getDefaultEnvelopeEncodingStyle() {
            return null;
        }
        
        public java.lang.String _getImplicitEnvelopeEncodingStyle() {
            return "";
        }
        
        public java.lang.String _getEncodingStyle() {
            return SOAPNamespaceConstants.ENCODING;
        }
        
        public void _setEncodingStyle(java.lang.String encodingStyle) {
            throw new UnsupportedOperationException("cannot set encoding style");
        }
        
        
        
        
        
        /*
         * This method returns an array containing (prefix, nsURI) pairs.
         */
        protected java.lang.String[] _getNamespaceDeclarations() {
            return myNamespace_declarations;
        }
        
        /*
         * This method returns an array containing the names of the headers we understand.
         */
        public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
            return understoodHeaderNames;
        }
        
        public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
            super._initialize(registry);
            ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        }
        
        private static final javax.xml.namespace.QName _portName = new QName("http://tempuri.org/", "CustomBinding_Notify");
        private static final int Notify_OPCODE = 0;
        private static final javax.xml.namespace.QName ns1_Notify_notify_QNAME = new QName("http://example.org/notify", "notify");
        private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
        private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
        private static final java.lang.String[] myNamespace_declarations =
                                            new java.lang.String[] {
                                                
                                            };
        
        private static final QName[] understoodHeaderNames = new QName[] {  };
    }
