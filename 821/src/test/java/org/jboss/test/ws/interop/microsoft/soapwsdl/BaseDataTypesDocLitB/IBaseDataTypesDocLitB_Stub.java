// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitB;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class IBaseDataTypesDocLitB_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitB.IBaseDataTypesDocLitB {
    
    
    
    /*
     *  public constructor
     */
    public IBaseDataTypesDocLitB_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://131.107.72.15/SoapWsdl_BaseDataTypes_XmlFormatter_Service_Indigo/BaseDataTypesDocLitB.svc");
    }
    
    
    /*
     *  implementation of retChar
     */
    public int retChar(int inChar)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetChar_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetChar_inChar_QNAME);
            _bodyBlock.setValue(new java.lang.Integer(inChar));
            _bodyBlock.setSerializer(ns2_myns2__int__int_Int_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetChar");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer)((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer)_responseObj).intValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retFloat
     */
    public float retFloat(float inFloat)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetFloat_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetFloat_inFloat_QNAME);
            _bodyBlock.setValue(new Float(inFloat));
            _bodyBlock.setSerializer(ns2_myns2__float__float_Float_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetFloat");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            float _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Float)((SOAPDeserializationState) _responseObj).getInstance()).floatValue();
            } else {
                _result = ((Float)_responseObj).floatValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retTimeSpan
     */
    public java.lang.String retTimeSpan(java.lang.String inTimeSpan)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetTimeSpan_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetTimeSpan_inTimeSpan_QNAME);
            _bodyBlock.setValue(inTimeSpan);
            _bodyBlock.setSerializer(ns2_myns2_duration__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetTimeSpan");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.lang.String _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.lang.String)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.lang.String)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retULong
     */
    public java.math.BigInteger retULong(java.math.BigInteger inULong)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetULong_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetULong_inULong_QNAME);
            _bodyBlock.setValue(inULong);
            _bodyBlock.setSerializer(ns2_myns2_unsignedLong__java_math_BigInteger_UnsignedLong_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetULong");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.math.BigInteger _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.math.BigInteger)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.math.BigInteger)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retQName
     */
    public javax.xml.namespace.QName retQName(javax.xml.namespace.QName inQName)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetQName_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetQName_inQName_QNAME);
            _bodyBlock.setValue(inQName);
            _bodyBlock.setSerializer(ns2_myns2_QName__javax_xml_namespace_QName_QName_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetQName");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            javax.xml.namespace.QName _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (javax.xml.namespace.QName)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (javax.xml.namespace.QName)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retObject
     */
    public javax.xml.soap.SOAPElement retObject(javax.xml.soap.SOAPElement inObject)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetObject_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetObject_inObject_QNAME);
            _bodyBlock.setValue(inObject);
            _bodyBlock.setSerializer(ns2_ns2_anyType_TYPE_QNAME_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetObject");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            javax.xml.soap.SOAPElement _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (javax.xml.soap.SOAPElement)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (javax.xml.soap.SOAPElement)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retUInt
     */
    public long retUInt(long inUInt)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetUInt_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetUInt_inUInt_QNAME);
            _bodyBlock.setValue(new Long(inUInt));
            _bodyBlock.setSerializer(ns2_myns2_unsignedInt__long_UnsignedInt_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetUInt");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            long _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Long)((SOAPDeserializationState) _responseObj).getInstance()).longValue();
            } else {
                _result = ((Long)_responseObj).longValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retGuid
     */
    public java.lang.String retGuid(java.lang.String inGuid)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetGuid_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetGuid_inGuid_QNAME);
            _bodyBlock.setValue(inGuid);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetGuid");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.lang.String _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.lang.String)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.lang.String)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retSingle
     */
    public float retSingle(float inSingle)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetSingle_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetSingle_inSingle_QNAME);
            _bodyBlock.setValue(new Float(inSingle));
            _bodyBlock.setSerializer(ns2_myns2__float__float_Float_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetSingle");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            float _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Float)((SOAPDeserializationState) _responseObj).getInstance()).floatValue();
            } else {
                _result = ((Float)_responseObj).floatValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retString
     */
    public java.lang.String retString(java.lang.String inString)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetString_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetString_inString_QNAME);
            _bodyBlock.setValue(inString);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetString");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.lang.String _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.lang.String)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.lang.String)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retDecimal
     */
    public java.math.BigDecimal retDecimal(java.math.BigDecimal inDecimal)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetDecimal_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetDecimal_inDecimal_QNAME);
            _bodyBlock.setValue(inDecimal);
            _bodyBlock.setSerializer(ns2_myns2_decimal__java_math_BigDecimal_Decimal_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetDecimal");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.math.BigDecimal _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.math.BigDecimal)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.math.BigDecimal)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retDateTime
     */
    public java.util.Calendar retDateTime(java.util.Calendar inDateTime)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetDateTime_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetDateTime_inDateTime_QNAME);
            _bodyBlock.setValue(inDateTime);
            _bodyBlock.setSerializer(ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetDateTime");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.util.Calendar _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.util.Calendar)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.util.Calendar)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retInt
     */
    public int retInt(int inInt)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetInt_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetInt_inInt_QNAME);
            _bodyBlock.setValue(new java.lang.Integer(inInt));
            _bodyBlock.setSerializer(ns2_myns2__int__int_Int_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetInt");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer)((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer)_responseObj).intValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retDouble
     */
    public double retDouble(double inDouble)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetDouble_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetDouble_inDouble_QNAME);
            _bodyBlock.setValue(new Double(inDouble));
            _bodyBlock.setSerializer(ns2_myns2__double__double_Double_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetDouble");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            double _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Double)((SOAPDeserializationState) _responseObj).getInstance()).doubleValue();
            } else {
                _result = ((Double)_responseObj).doubleValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retUri
     */
    public java.net.URI retUri(java.net.URI inUri)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetUri_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetUri_inUri_QNAME);
            _bodyBlock.setValue(inUri);
            _bodyBlock.setSerializer(ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetUri");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.net.URI _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.net.URI)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.net.URI)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retByteArray
     */
    public byte[] retByteArray(byte[] inByteArray)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetByteArray_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetByteArray_inByteArray_QNAME);
            _bodyBlock.setValue(inByteArray);
            _bodyBlock.setSerializer(ns2_myns2_base64Binary__byte_Base64Binary_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetByteArray");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            byte[] _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (byte[])((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (byte[])_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retLong
     */
    public long retLong(long inLong)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetLong_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetLong_inLong_QNAME);
            _bodyBlock.setValue(new Long(inLong));
            _bodyBlock.setSerializer(ns2_myns2__long__long_Long_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetLong");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            long _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Long)((SOAPDeserializationState) _responseObj).getInstance()).longValue();
            } else {
                _result = ((Long)_responseObj).longValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retUShort
     */
    public int retUShort(int inUShort)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetUShort_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetUShort_inUShort_QNAME);
            _bodyBlock.setValue(new java.lang.Integer(inUShort));
            _bodyBlock.setSerializer(ns2_myns2_unsignedShort__int_UnsignedShort_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetUShort");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            int _result = 0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((java.lang.Integer)((SOAPDeserializationState) _responseObj).getInstance()).intValue();
            } else {
                _result = ((java.lang.Integer)_responseObj).intValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retByte
     */
    public short retByte(short inByte)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetByte_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetByte_inByte_QNAME);
            _bodyBlock.setValue(new Short(inByte));
            _bodyBlock.setSerializer(ns2_myns2_unsignedByte__short_UnsignedByte_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetByte");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            short _result = (short)0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Short)((SOAPDeserializationState) _responseObj).getInstance()).shortValue();
            } else {
                _result = ((Short)_responseObj).shortValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retShort
     */
    public short retShort(short inShort)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetShort_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetShort_inShort_QNAME);
            _bodyBlock.setValue(new Short(inShort));
            _bodyBlock.setSerializer(ns2_myns2__short__short_Short_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetShort");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            short _result = (short)0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Short)((SOAPDeserializationState) _responseObj).getInstance()).shortValue();
            } else {
                _result = ((Short)_responseObj).shortValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retBool
     */
    public boolean retBool(boolean inBool)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetBool_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetBool_inBool_QNAME);
            _bodyBlock.setValue(new Boolean(inBool));
            _bodyBlock.setSerializer(ns2_myns2__boolean__boolean_Boolean_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetBool");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            boolean _result = false;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Boolean)((SOAPDeserializationState) _responseObj).getInstance()).booleanValue();
            } else {
                _result = ((Boolean)_responseObj).booleanValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of retSByte
     */
    public byte retSByte(byte inSByte)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(RetSByte_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_RetSByte_inSByte_QNAME);
            _bodyBlock.setValue(new Byte(inSByte));
            _bodyBlock.setSerializer(ns2_myns2__byte__byte_Byte_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://tempuri.org/IBaseDataTypesDocLitB/RetSByte");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            byte _result = (byte)0;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = ((Byte)((SOAPDeserializationState) _responseObj).getInstance()).byteValue();
            } else {
                _result = ((Byte)_responseObj).byteValue();
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case RetChar_OPCODE:
                _deserialize_RetChar(bodyReader, deserializationContext, state);
                break;
            case RetFloat_OPCODE:
                _deserialize_RetFloat(bodyReader, deserializationContext, state);
                break;
            case RetTimeSpan_OPCODE:
                _deserialize_RetTimeSpan(bodyReader, deserializationContext, state);
                break;
            case RetULong_OPCODE:
                _deserialize_RetULong(bodyReader, deserializationContext, state);
                break;
            case RetQName_OPCODE:
                _deserialize_RetQName(bodyReader, deserializationContext, state);
                break;
            case RetObject_OPCODE:
                _deserialize_RetObject(bodyReader, deserializationContext, state);
                break;
            case RetUInt_OPCODE:
                _deserialize_RetUInt(bodyReader, deserializationContext, state);
                break;
            case RetGuid_OPCODE:
                _deserialize_RetGuid(bodyReader, deserializationContext, state);
                break;
            case RetSingle_OPCODE:
                _deserialize_RetSingle(bodyReader, deserializationContext, state);
                break;
            case RetString_OPCODE:
                _deserialize_RetString(bodyReader, deserializationContext, state);
                break;
            case RetDecimal_OPCODE:
                _deserialize_RetDecimal(bodyReader, deserializationContext, state);
                break;
            case RetDateTime_OPCODE:
                _deserialize_RetDateTime(bodyReader, deserializationContext, state);
                break;
            case RetInt_OPCODE:
                _deserialize_RetInt(bodyReader, deserializationContext, state);
                break;
            case RetDouble_OPCODE:
                _deserialize_RetDouble(bodyReader, deserializationContext, state);
                break;
            case RetUri_OPCODE:
                _deserialize_RetUri(bodyReader, deserializationContext, state);
                break;
            case RetByteArray_OPCODE:
                _deserialize_RetByteArray(bodyReader, deserializationContext, state);
                break;
            case RetLong_OPCODE:
                _deserialize_RetLong(bodyReader, deserializationContext, state);
                break;
            case RetUShort_OPCODE:
                _deserialize_RetUShort(bodyReader, deserializationContext, state);
                break;
            case RetByte_OPCODE:
                _deserialize_RetByte(bodyReader, deserializationContext, state);
                break;
            case RetShort_OPCODE:
                _deserialize_RetShort(bodyReader, deserializationContext, state);
                break;
            case RetBool_OPCODE:
                _deserialize_RetBool(bodyReader, deserializationContext, state);
                break;
            case RetSByte_OPCODE:
                _deserialize_RetSByte(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the RetChar operation.
     */
    private void _deserialize_RetChar(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
            ns2_myns2__int__int_Int_Serializer.deserialize(ns1_RetChar_RetCharResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetChar_RetCharResult_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetFloat operation.
     */
    private void _deserialize_RetFloat(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myfloatObj =
            ns2_myns2__float__float_Float_Serializer.deserialize(ns1_RetFloat_RetFloatResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetFloat_RetFloatResult_QNAME);
        bodyBlock.setValue(myfloatObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetTimeSpan operation.
     */
    private void _deserialize_RetTimeSpan(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStringObj =
            ns2_myns2_duration__java_lang_String_String_Serializer.deserialize(ns1_RetTimeSpan_RetTimeSpanResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetTimeSpan_RetTimeSpanResult_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetULong operation.
     */
    private void _deserialize_RetULong(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myBigIntegerObj =
            ns2_myns2_unsignedLong__java_math_BigInteger_UnsignedLong_Serializer.deserialize(ns1_RetULong_RetULongResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetULong_RetULongResult_QNAME);
        bodyBlock.setValue(myBigIntegerObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetQName operation.
     */
    private void _deserialize_RetQName(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myQNameObj =
            ns2_myns2_QName__javax_xml_namespace_QName_QName_Serializer.deserialize(ns1_RetQName_RetQNameResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetQName_RetQNameResult_QNAME);
        bodyBlock.setValue(myQNameObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetObject operation.
     */
    private void _deserialize_RetObject(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mySOAPElementObj =
            ns2_ns2_anyType_TYPE_QNAME_Serializer.deserialize(ns1_RetObject_RetObjectResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetObject_RetObjectResult_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetUInt operation.
     */
    private void _deserialize_RetUInt(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mylongObj =
            ns2_myns2_unsignedInt__long_UnsignedInt_Serializer.deserialize(ns1_RetUInt_RetUIntResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUInt_RetUIntResult_QNAME);
        bodyBlock.setValue(mylongObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetGuid operation.
     */
    private void _deserialize_RetGuid(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_RetGuid_RetGuidResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetGuid_RetGuidResult_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetSingle operation.
     */
    private void _deserialize_RetSingle(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myfloatObj =
            ns2_myns2__float__float_Float_Serializer.deserialize(ns1_RetSingle_RetSingleResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetSingle_RetSingleResult_QNAME);
        bodyBlock.setValue(myfloatObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetString operation.
     */
    private void _deserialize_RetString(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_RetString_RetStringResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetString_RetStringResult_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetDecimal operation.
     */
    private void _deserialize_RetDecimal(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myBigDecimalObj =
            ns2_myns2_decimal__java_math_BigDecimal_Decimal_Serializer.deserialize(ns1_RetDecimal_RetDecimalResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDecimal_RetDecimalResult_QNAME);
        bodyBlock.setValue(myBigDecimalObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetDateTime operation.
     */
    private void _deserialize_RetDateTime(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myCalendarObj =
            ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_RetDateTime_RetDateTimeResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDateTime_RetDateTimeResult_QNAME);
        bodyBlock.setValue(myCalendarObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetInt operation.
     */
    private void _deserialize_RetInt(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
            ns2_myns2__int__int_Int_Serializer.deserialize(ns1_RetInt_RetIntResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetInt_RetIntResult_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetDouble operation.
     */
    private void _deserialize_RetDouble(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mydoubleObj =
            ns2_myns2__double__double_Double_Serializer.deserialize(ns1_RetDouble_RetDoubleResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDouble_RetDoubleResult_QNAME);
        bodyBlock.setValue(mydoubleObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetUri operation.
     */
    private void _deserialize_RetUri(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myURIObj =
            ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer.deserialize(ns1_RetUri_RetUriResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUri_RetUriResult_QNAME);
        bodyBlock.setValue(myURIObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetByteArray operation.
     */
    private void _deserialize_RetByteArray(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mybyteObj =
            ns2_myns2_base64Binary__byte_Base64Binary_Serializer.deserialize(ns1_RetByteArray_RetByteArrayResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetByteArray_RetByteArrayResult_QNAME);
        bodyBlock.setValue(mybyteObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetLong operation.
     */
    private void _deserialize_RetLong(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mylongObj =
            ns2_myns2__long__long_Long_Serializer.deserialize(ns1_RetLong_RetLongResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetLong_RetLongResult_QNAME);
        bodyBlock.setValue(mylongObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetUShort operation.
     */
    private void _deserialize_RetUShort(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myintObj =
            ns2_myns2_unsignedShort__int_UnsignedShort_Serializer.deserialize(ns1_RetUShort_RetUShortResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUShort_RetUShortResult_QNAME);
        bodyBlock.setValue(myintObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetByte operation.
     */
    private void _deserialize_RetByte(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myshortObj =
            ns2_myns2_unsignedByte__short_UnsignedByte_Serializer.deserialize(ns1_RetByte_RetByteResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetByte_RetByteResult_QNAME);
        bodyBlock.setValue(myshortObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetShort operation.
     */
    private void _deserialize_RetShort(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myshortObj =
            ns2_myns2__short__short_Short_Serializer.deserialize(ns1_RetShort_RetShortResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetShort_RetShortResult_QNAME);
        bodyBlock.setValue(myshortObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetBool operation.
     */
    private void _deserialize_RetBool(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mybooleanObj =
            ns2_myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_RetBool_RetBoolResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetBool_RetBoolResult_QNAME);
        bodyBlock.setValue(mybooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetSByte operation.
     */
    private void _deserialize_RetSByte(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mybyteObj =
            ns2_myns2__byte__byte_Byte_Serializer.deserialize(ns1_RetSByte_RetSByteResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetSByte_RetSByteResult_QNAME);
        bodyBlock.setValue(mybyteObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected java.lang.String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public java.lang.String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public java.lang.String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(java.lang.String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns2_myns2__byte__byte_Byte_Serializer = (CombinedSerializer)registry.getSerializer("", byte.class, ns2_byte_TYPE_QNAME);
        ns2_myns2__int__int_Int_Serializer = (CombinedSerializer)registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
        ns2_myns2_QName__javax_xml_namespace_QName_QName_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.namespace.QName.class, ns2_QName_TYPE_QNAME);
        ns2_myns2__long__long_Long_Serializer = (CombinedSerializer)registry.getSerializer("", long.class, ns2_long_TYPE_QNAME);
        ns2_myns2_base64Binary__byte_Base64Binary_Serializer = (CombinedSerializer)registry.getSerializer("", byte[].class, ns2_base64Binary_TYPE_QNAME);
        ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer = (CombinedSerializer)registry.getSerializer("", java.util.Calendar.class, ns2_dateTime_TYPE_QNAME);
        ns2_myns2__float__float_Float_Serializer = (CombinedSerializer)registry.getSerializer("", float.class, ns2_float_TYPE_QNAME);
        ns2_myns2_unsignedByte__short_UnsignedByte_Serializer = (CombinedSerializer)registry.getSerializer("", short.class, ns2_unsignedByte_TYPE_QNAME);
        ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer = (CombinedSerializer)registry.getSerializer("", java.net.URI.class, ns2_anyURI_TYPE_QNAME);
        ns2_myns2_decimal__java_math_BigDecimal_Decimal_Serializer = (CombinedSerializer)registry.getSerializer("", java.math.BigDecimal.class, ns2_decimal_TYPE_QNAME);
        ns2_myns2_duration__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_duration_TYPE_QNAME);
        ns2_myns2_unsignedLong__java_math_BigInteger_UnsignedLong_Serializer = (CombinedSerializer)registry.getSerializer("", java.math.BigInteger.class, ns2_unsignedLong_TYPE_QNAME);
        ns2_ns2_anyType_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns2_anyType_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns2_myns2_unsignedInt__long_UnsignedInt_Serializer = (CombinedSerializer)registry.getSerializer("", long.class, ns2_unsignedInt_TYPE_QNAME);
        ns2_myns2_unsignedShort__int_UnsignedShort_Serializer = (CombinedSerializer)registry.getSerializer("", int.class, ns2_unsignedShort_TYPE_QNAME);
        ns2_myns2__double__double_Double_Serializer = (CombinedSerializer)registry.getSerializer("", double.class, ns2_double_TYPE_QNAME);
        ns2_myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
        ns2_myns2__short__short_Short_Serializer = (CombinedSerializer)registry.getSerializer("", short.class, ns2_short_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName _portName = new QName("http://tempuri.org/", "BasicHttpBinding_IBaseDataTypesDocLitB");
    private static final int RetChar_OPCODE = 0;
    private static final int RetFloat_OPCODE = 1;
    private static final int RetTimeSpan_OPCODE = 2;
    private static final int RetULong_OPCODE = 3;
    private static final int RetQName_OPCODE = 4;
    private static final int RetObject_OPCODE = 5;
    private static final int RetUInt_OPCODE = 6;
    private static final int RetGuid_OPCODE = 7;
    private static final int RetSingle_OPCODE = 8;
    private static final int RetString_OPCODE = 9;
    private static final int RetDecimal_OPCODE = 10;
    private static final int RetDateTime_OPCODE = 11;
    private static final int RetInt_OPCODE = 12;
    private static final int RetDouble_OPCODE = 13;
    private static final int RetUri_OPCODE = 14;
    private static final int RetByteArray_OPCODE = 15;
    private static final int RetLong_OPCODE = 16;
    private static final int RetUShort_OPCODE = 17;
    private static final int RetByte_OPCODE = 18;
    private static final int RetShort_OPCODE = 19;
    private static final int RetBool_OPCODE = 20;
    private static final int RetSByte_OPCODE = 21;
    private static final javax.xml.namespace.QName ns1_RetChar_inChar_QNAME = new QName("http://tempuri.org/", "inChar");
    private static final javax.xml.namespace.QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer ns2_myns2__int__int_Int_Serializer;
    private static final javax.xml.namespace.QName ns1_RetChar_RetCharResult_QNAME = new QName("http://tempuri.org/", "RetCharResult");
    private static final javax.xml.namespace.QName ns1_RetFloat_inFloat_QNAME = new QName("http://tempuri.org/", "inFloat");
    private static final javax.xml.namespace.QName ns2_float_TYPE_QNAME = SchemaConstants.QNAME_TYPE_FLOAT;
    private CombinedSerializer ns2_myns2__float__float_Float_Serializer;
    private static final javax.xml.namespace.QName ns1_RetFloat_RetFloatResult_QNAME = new QName("http://tempuri.org/", "RetFloatResult");
    private static final javax.xml.namespace.QName ns1_RetTimeSpan_inTimeSpan_QNAME = new QName("http://tempuri.org/", "inTimeSpan");
    private static final javax.xml.namespace.QName ns2_duration_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DURATION;
    private CombinedSerializer ns2_myns2_duration__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_RetTimeSpan_RetTimeSpanResult_QNAME = new QName("http://tempuri.org/", "RetTimeSpanResult");
    private static final javax.xml.namespace.QName ns1_RetULong_inULong_QNAME = new QName("http://tempuri.org/", "inULong");
    private static final javax.xml.namespace.QName ns2_unsignedLong_TYPE_QNAME = SchemaConstants.QNAME_TYPE_UNSIGNED_LONG;
    private CombinedSerializer ns2_myns2_unsignedLong__java_math_BigInteger_UnsignedLong_Serializer;
    private static final javax.xml.namespace.QName ns1_RetULong_RetULongResult_QNAME = new QName("http://tempuri.org/", "RetULongResult");
    private static final javax.xml.namespace.QName ns1_RetQName_inQName_QNAME = new QName("http://tempuri.org/", "inQName");
    private static final javax.xml.namespace.QName ns2_QName_TYPE_QNAME = SchemaConstants.QNAME_TYPE_QNAME;
    private CombinedSerializer ns2_myns2_QName__javax_xml_namespace_QName_QName_Serializer;
    private static final javax.xml.namespace.QName ns1_RetQName_RetQNameResult_QNAME = new QName("http://tempuri.org/", "RetQNameResult");
    private static final javax.xml.namespace.QName ns1_RetObject_inObject_QNAME = new QName("http://tempuri.org/", "inObject");
    private static final javax.xml.namespace.QName ns2_anyType_TYPE_QNAME = SchemaConstants.QNAME_TYPE_URTYPE;
    private CombinedSerializer ns2_ns2_anyType_TYPE_QNAME_Serializer;
    private static final javax.xml.namespace.QName ns1_RetObject_RetObjectResult_QNAME = new QName("http://tempuri.org/", "RetObjectResult");
    private static final javax.xml.namespace.QName ns1_RetUInt_inUInt_QNAME = new QName("http://tempuri.org/", "inUInt");
    private static final javax.xml.namespace.QName ns2_unsignedInt_TYPE_QNAME = SchemaConstants.QNAME_TYPE_UNSIGNED_INT;
    private CombinedSerializer ns2_myns2_unsignedInt__long_UnsignedInt_Serializer;
    private static final javax.xml.namespace.QName ns1_RetUInt_RetUIntResult_QNAME = new QName("http://tempuri.org/", "RetUIntResult");
    private static final javax.xml.namespace.QName ns1_RetGuid_inGuid_QNAME = new QName("http://tempuri.org/", "inGuid");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_RetGuid_RetGuidResult_QNAME = new QName("http://tempuri.org/", "RetGuidResult");
    private static final javax.xml.namespace.QName ns1_RetSingle_inSingle_QNAME = new QName("http://tempuri.org/", "inSingle");
    private static final javax.xml.namespace.QName ns1_RetSingle_RetSingleResult_QNAME = new QName("http://tempuri.org/", "RetSingleResult");
    private static final javax.xml.namespace.QName ns1_RetString_inString_QNAME = new QName("http://tempuri.org/", "inString");
    private static final javax.xml.namespace.QName ns1_RetString_RetStringResult_QNAME = new QName("http://tempuri.org/", "RetStringResult");
    private static final javax.xml.namespace.QName ns1_RetDecimal_inDecimal_QNAME = new QName("http://tempuri.org/", "inDecimal");
    private static final javax.xml.namespace.QName ns2_decimal_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DECIMAL;
    private CombinedSerializer ns2_myns2_decimal__java_math_BigDecimal_Decimal_Serializer;
    private static final javax.xml.namespace.QName ns1_RetDecimal_RetDecimalResult_QNAME = new QName("http://tempuri.org/", "RetDecimalResult");
    private static final javax.xml.namespace.QName ns1_RetDateTime_inDateTime_QNAME = new QName("http://tempuri.org/", "inDateTime");
    private static final javax.xml.namespace.QName ns2_dateTime_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DATE_TIME;
    private CombinedSerializer ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer;
    private static final javax.xml.namespace.QName ns1_RetDateTime_RetDateTimeResult_QNAME = new QName("http://tempuri.org/", "RetDateTimeResult");
    private static final javax.xml.namespace.QName ns1_RetInt_inInt_QNAME = new QName("http://tempuri.org/", "inInt");
    private static final javax.xml.namespace.QName ns1_RetInt_RetIntResult_QNAME = new QName("http://tempuri.org/", "RetIntResult");
    private static final javax.xml.namespace.QName ns1_RetDouble_inDouble_QNAME = new QName("http://tempuri.org/", "inDouble");
    private static final javax.xml.namespace.QName ns2_double_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DOUBLE;
    private CombinedSerializer ns2_myns2__double__double_Double_Serializer;
    private static final javax.xml.namespace.QName ns1_RetDouble_RetDoubleResult_QNAME = new QName("http://tempuri.org/", "RetDoubleResult");
    private static final javax.xml.namespace.QName ns1_RetUri_inUri_QNAME = new QName("http://tempuri.org/", "inUri");
    private static final javax.xml.namespace.QName ns2_anyURI_TYPE_QNAME = SchemaConstants.QNAME_TYPE_ANY_URI;
    private CombinedSerializer ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer;
    private static final javax.xml.namespace.QName ns1_RetUri_RetUriResult_QNAME = new QName("http://tempuri.org/", "RetUriResult");
    private static final javax.xml.namespace.QName ns1_RetByteArray_inByteArray_QNAME = new QName("http://tempuri.org/", "inByteArray");
    private static final javax.xml.namespace.QName ns2_base64Binary_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BASE64_BINARY;
    private CombinedSerializer ns2_myns2_base64Binary__byte_Base64Binary_Serializer;
    private static final javax.xml.namespace.QName ns1_RetByteArray_RetByteArrayResult_QNAME = new QName("http://tempuri.org/", "RetByteArrayResult");
    private static final javax.xml.namespace.QName ns1_RetLong_inLong_QNAME = new QName("http://tempuri.org/", "inLong");
    private static final javax.xml.namespace.QName ns2_long_TYPE_QNAME = SchemaConstants.QNAME_TYPE_LONG;
    private CombinedSerializer ns2_myns2__long__long_Long_Serializer;
    private static final javax.xml.namespace.QName ns1_RetLong_RetLongResult_QNAME = new QName("http://tempuri.org/", "RetLongResult");
    private static final javax.xml.namespace.QName ns1_RetUShort_inUShort_QNAME = new QName("http://tempuri.org/", "inUShort");
    private static final javax.xml.namespace.QName ns2_unsignedShort_TYPE_QNAME = SchemaConstants.QNAME_TYPE_UNSIGNED_SHORT;
    private CombinedSerializer ns2_myns2_unsignedShort__int_UnsignedShort_Serializer;
    private static final javax.xml.namespace.QName ns1_RetUShort_RetUShortResult_QNAME = new QName("http://tempuri.org/", "RetUShortResult");
    private static final javax.xml.namespace.QName ns1_RetByte_inByte_QNAME = new QName("http://tempuri.org/", "inByte");
    private static final javax.xml.namespace.QName ns2_unsignedByte_TYPE_QNAME = SchemaConstants.QNAME_TYPE_UNSIGNED_BYTE;
    private CombinedSerializer ns2_myns2_unsignedByte__short_UnsignedByte_Serializer;
    private static final javax.xml.namespace.QName ns1_RetByte_RetByteResult_QNAME = new QName("http://tempuri.org/", "RetByteResult");
    private static final javax.xml.namespace.QName ns1_RetShort_inShort_QNAME = new QName("http://tempuri.org/", "inShort");
    private static final javax.xml.namespace.QName ns2_short_TYPE_QNAME = SchemaConstants.QNAME_TYPE_SHORT;
    private CombinedSerializer ns2_myns2__short__short_Short_Serializer;
    private static final javax.xml.namespace.QName ns1_RetShort_RetShortResult_QNAME = new QName("http://tempuri.org/", "RetShortResult");
    private static final javax.xml.namespace.QName ns1_RetBool_inBool_QNAME = new QName("http://tempuri.org/", "inBool");
    private static final javax.xml.namespace.QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer ns2_myns2__boolean__boolean_Boolean_Serializer;
    private static final javax.xml.namespace.QName ns1_RetBool_RetBoolResult_QNAME = new QName("http://tempuri.org/", "RetBoolResult");
    private static final javax.xml.namespace.QName ns1_RetSByte_inSByte_QNAME = new QName("http://tempuri.org/", "inSByte");
    private static final javax.xml.namespace.QName ns2_byte_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BYTE;
    private CombinedSerializer ns2_myns2__byte__byte_Byte_Serializer;
    private static final javax.xml.namespace.QName ns1_RetSByte_RetSByteResult_QNAME = new QName("http://tempuri.org/", "RetSByteResult");
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
