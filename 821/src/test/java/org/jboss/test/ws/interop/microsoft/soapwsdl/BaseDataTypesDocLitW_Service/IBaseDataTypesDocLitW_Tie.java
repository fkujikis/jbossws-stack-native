// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;
import javax.xml.rpc.handler.HandlerInfo;
import com.sun.xml.rpc.client.HandlerChainImpl;

public class IBaseDataTypesDocLitW_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public IBaseDataTypesDocLitW_Tie() throws Exception {
        super(new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.BaseDataTypesDocLitWService_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: RetTimeSpan
     */
    private void invoke_RetTimeSpan(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpan myRetTimeSpan = null;
        Object myRetTimeSpanObj =
            state.getRequest().getBody().getValue();
        
        if (myRetTimeSpanObj instanceof SOAPDeserializationState) {
            myRetTimeSpan = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpan)((SOAPDeserializationState)myRetTimeSpanObj).getInstance();
        } else {
            myRetTimeSpan = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpan)myRetTimeSpanObj;
        }
        
        try {
            java.lang.String retTimeSpanResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retTimeSpan(myRetTimeSpan.getInTimeSpan());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpanResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpanResponse();
            _response.setRetTimeSpanResult(retTimeSpanResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetTimeSpan_RetTimeSpanResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetTimeSpanResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetByteArray
     */
    private void invoke_RetByteArray(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArray myRetByteArray = null;
        Object myRetByteArrayObj =
            state.getRequest().getBody().getValue();
        
        if (myRetByteArrayObj instanceof SOAPDeserializationState) {
            myRetByteArray = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArray)((SOAPDeserializationState)myRetByteArrayObj).getInstance();
        } else {
            myRetByteArray = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArray)myRetByteArrayObj;
        }
        
        try {
            byte[] retByteArrayResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retByteArray(myRetByteArray.getInByteArray());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArrayResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArrayResponse();
            _response.setRetByteArrayResult(retByteArrayResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetByteArray_RetByteArrayResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetByteArrayResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetDouble
     */
    private void invoke_RetDouble(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDouble myRetDouble = null;
        Object myRetDoubleObj =
            state.getRequest().getBody().getValue();
        
        if (myRetDoubleObj instanceof SOAPDeserializationState) {
            myRetDouble = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDouble)((SOAPDeserializationState)myRetDoubleObj).getInstance();
        } else {
            myRetDouble = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDouble)myRetDoubleObj;
        }
        
        try {
            java.lang.Double retDoubleResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retDouble(myRetDouble.getInDouble());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDoubleResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDoubleResponse();
            _response.setRetDoubleResult(retDoubleResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDouble_RetDoubleResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetDoubleResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetByte
     */
    private void invoke_RetByte(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByte myRetByte = null;
        Object myRetByteObj =
            state.getRequest().getBody().getValue();
        
        if (myRetByteObj instanceof SOAPDeserializationState) {
            myRetByte = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByte)((SOAPDeserializationState)myRetByteObj).getInstance();
        } else {
            myRetByte = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByte)myRetByteObj;
        }
        
        try {
            short retByteResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retByte(myRetByte.getInByte());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteResponse();
            _response.setRetByteResult(retByteResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetByte_RetByteResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetByteResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetLong
     */
    private void invoke_RetLong(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLong myRetLong = null;
        Object myRetLongObj =
            state.getRequest().getBody().getValue();
        
        if (myRetLongObj instanceof SOAPDeserializationState) {
            myRetLong = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLong)((SOAPDeserializationState)myRetLongObj).getInstance();
        } else {
            myRetLong = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLong)myRetLongObj;
        }
        
        try {
            java.lang.Long retLongResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retLong(myRetLong.getInLong());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLongResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLongResponse();
            _response.setRetLongResult(retLongResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetLong_RetLongResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetLongResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetFloat
     */
    private void invoke_RetFloat(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloat myRetFloat = null;
        Object myRetFloatObj =
            state.getRequest().getBody().getValue();
        
        if (myRetFloatObj instanceof SOAPDeserializationState) {
            myRetFloat = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloat)((SOAPDeserializationState)myRetFloatObj).getInstance();
        } else {
            myRetFloat = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloat)myRetFloatObj;
        }
        
        try {
            java.lang.Float retFloatResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retFloat(myRetFloat.getInFloat());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloatResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloatResponse();
            _response.setRetFloatResult(retFloatResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetFloat_RetFloatResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetFloatResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetULong
     */
    private void invoke_RetULong(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULong myRetULong = null;
        Object myRetULongObj =
            state.getRequest().getBody().getValue();
        
        if (myRetULongObj instanceof SOAPDeserializationState) {
            myRetULong = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULong)((SOAPDeserializationState)myRetULongObj).getInstance();
        } else {
            myRetULong = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULong)myRetULongObj;
        }
        
        try {
            java.math.BigInteger retULongResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retULong(myRetULong.getInULong());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULongResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULongResponse();
            _response.setRetULongResult(retULongResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetULong_RetULongResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetULongResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetChar
     */
    private void invoke_RetChar(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetChar myRetChar = null;
        Object myRetCharObj =
            state.getRequest().getBody().getValue();
        
        if (myRetCharObj instanceof SOAPDeserializationState) {
            myRetChar = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetChar)((SOAPDeserializationState)myRetCharObj).getInstance();
        } else {
            myRetChar = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetChar)myRetCharObj;
        }
        
        try {
            java.lang.Integer retCharResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retChar(myRetChar.getInChar());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetCharResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetCharResponse();
            _response.setRetCharResult(retCharResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetChar_RetCharResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetCharResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetGuid
     */
    private void invoke_RetGuid(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuid myRetGuid = null;
        Object myRetGuidObj =
            state.getRequest().getBody().getValue();
        
        if (myRetGuidObj instanceof SOAPDeserializationState) {
            myRetGuid = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuid)((SOAPDeserializationState)myRetGuidObj).getInstance();
        } else {
            myRetGuid = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuid)myRetGuidObj;
        }
        
        try {
            java.lang.String retGuidResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retGuid(myRetGuid.getInGuid());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuidResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuidResponse();
            _response.setRetGuidResult(retGuidResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetGuid_RetGuidResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetGuidResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetSingle
     */
    private void invoke_RetSingle(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingle myRetSingle = null;
        Object myRetSingleObj =
            state.getRequest().getBody().getValue();
        
        if (myRetSingleObj instanceof SOAPDeserializationState) {
            myRetSingle = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingle)((SOAPDeserializationState)myRetSingleObj).getInstance();
        } else {
            myRetSingle = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingle)myRetSingleObj;
        }
        
        try {
            java.lang.Float retSingleResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retSingle(myRetSingle.getInSingle());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingleResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingleResponse();
            _response.setRetSingleResult(retSingleResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetSingle_RetSingleResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetSingleResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetString
     */
    private void invoke_RetString(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetString myRetString = null;
        Object myRetStringObj =
            state.getRequest().getBody().getValue();
        
        if (myRetStringObj instanceof SOAPDeserializationState) {
            myRetString = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetString)((SOAPDeserializationState)myRetStringObj).getInstance();
        } else {
            myRetString = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetString)myRetStringObj;
        }
        
        try {
            java.lang.String retStringResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retString(myRetString.getInString());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetStringResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetStringResponse();
            _response.setRetStringResult(retStringResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetString_RetStringResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetStringResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetQName
     */
    private void invoke_RetQName(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQName myRetQName = null;
        Object myRetQNameObj =
            state.getRequest().getBody().getValue();
        
        if (myRetQNameObj instanceof SOAPDeserializationState) {
            myRetQName = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQName)((SOAPDeserializationState)myRetQNameObj).getInstance();
        } else {
            myRetQName = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQName)myRetQNameObj;
        }
        
        try {
            javax.xml.namespace.QName retQNameResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retQName(myRetQName.getInQName());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQNameResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQNameResponse();
            _response.setRetQNameResult(retQNameResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetQName_RetQNameResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetQNameResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetDateTime
     */
    private void invoke_RetDateTime(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTime myRetDateTime = null;
        Object myRetDateTimeObj =
            state.getRequest().getBody().getValue();
        
        if (myRetDateTimeObj instanceof SOAPDeserializationState) {
            myRetDateTime = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTime)((SOAPDeserializationState)myRetDateTimeObj).getInstance();
        } else {
            myRetDateTime = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTime)myRetDateTimeObj;
        }
        
        try {
            java.util.Calendar retDateTimeResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retDateTime(myRetDateTime.getInDateTime());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTimeResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTimeResponse();
            _response.setRetDateTimeResult(retDateTimeResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDateTime_RetDateTimeResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetDateTimeResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetDecimal
     */
    private void invoke_RetDecimal(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimal myRetDecimal = null;
        Object myRetDecimalObj =
            state.getRequest().getBody().getValue();
        
        if (myRetDecimalObj instanceof SOAPDeserializationState) {
            myRetDecimal = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimal)((SOAPDeserializationState)myRetDecimalObj).getInstance();
        } else {
            myRetDecimal = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimal)myRetDecimalObj;
        }
        
        try {
            java.math.BigDecimal retDecimalResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retDecimal(myRetDecimal.getInDecimal());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimalResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimalResponse();
            _response.setRetDecimalResult(retDecimalResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDecimal_RetDecimalResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetDecimalResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetUri
     */
    private void invoke_RetUri(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUri myRetUri = null;
        Object myRetUriObj =
            state.getRequest().getBody().getValue();
        
        if (myRetUriObj instanceof SOAPDeserializationState) {
            myRetUri = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUri)((SOAPDeserializationState)myRetUriObj).getInstance();
        } else {
            myRetUri = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUri)myRetUriObj;
        }
        
        try {
            java.net.URI retUriResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retUri(myRetUri.getInUri());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUriResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUriResponse();
            _response.setRetUriResult(retUriResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUri_RetUriResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetUriResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetUInt
     */
    private void invoke_RetUInt(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUInt myRetUInt = null;
        Object myRetUIntObj =
            state.getRequest().getBody().getValue();
        
        if (myRetUIntObj instanceof SOAPDeserializationState) {
            myRetUInt = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUInt)((SOAPDeserializationState)myRetUIntObj).getInstance();
        } else {
            myRetUInt = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUInt)myRetUIntObj;
        }
        
        try {
            long retUIntResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retUInt(myRetUInt.getInUInt());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUIntResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUIntResponse();
            _response.setRetUIntResult(retUIntResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUInt_RetUIntResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetUIntResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetBool
     */
    private void invoke_RetBool(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBool myRetBool = null;
        Object myRetBoolObj =
            state.getRequest().getBody().getValue();
        
        if (myRetBoolObj instanceof SOAPDeserializationState) {
            myRetBool = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBool)((SOAPDeserializationState)myRetBoolObj).getInstance();
        } else {
            myRetBool = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBool)myRetBoolObj;
        }
        
        try {
            java.lang.Boolean retBoolResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retBool(myRetBool.getInBool());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBoolResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBoolResponse();
            _response.setRetBoolResult(retBoolResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetBool_RetBoolResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetBoolResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetSByte
     */
    private void invoke_RetSByte(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByte myRetSByte = null;
        Object myRetSByteObj =
            state.getRequest().getBody().getValue();
        
        if (myRetSByteObj instanceof SOAPDeserializationState) {
            myRetSByte = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByte)((SOAPDeserializationState)myRetSByteObj).getInstance();
        } else {
            myRetSByte = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByte)myRetSByteObj;
        }
        
        try {
            java.lang.Byte retSByteResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retSByte(myRetSByte.getInSByte());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByteResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByteResponse();
            _response.setRetSByteResult(retSByteResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetSByte_RetSByteResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetSByteResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetShort
     */
    private void invoke_RetShort(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShort myRetShort = null;
        Object myRetShortObj =
            state.getRequest().getBody().getValue();
        
        if (myRetShortObj instanceof SOAPDeserializationState) {
            myRetShort = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShort)((SOAPDeserializationState)myRetShortObj).getInstance();
        } else {
            myRetShort = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShort)myRetShortObj;
        }
        
        try {
            java.lang.Short retShortResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retShort(myRetShort.getInShort());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShortResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShortResponse();
            _response.setRetShortResult(retShortResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetShort_RetShortResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetShortResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetObject
     */
    private void invoke_RetObject(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObject myRetObject = null;
        Object myRetObjectObj =
            state.getRequest().getBody().getValue();
        
        if (myRetObjectObj instanceof SOAPDeserializationState) {
            myRetObject = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObject)((SOAPDeserializationState)myRetObjectObj).getInstance();
        } else {
            myRetObject = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObject)myRetObjectObj;
        }
        
        try {
            javax.xml.soap.SOAPElement retObjectResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retObject(myRetObject.getInObject());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObjectResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObjectResponse();
            _response.setRetObjectResult(retObjectResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetObject_RetObjectResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetObjectResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetInt
     */
    private void invoke_RetInt(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetInt myRetInt = null;
        Object myRetIntObj =
            state.getRequest().getBody().getValue();
        
        if (myRetIntObj instanceof SOAPDeserializationState) {
            myRetInt = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetInt)((SOAPDeserializationState)myRetIntObj).getInstance();
        } else {
            myRetInt = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetInt)myRetIntObj;
        }
        
        try {
            java.lang.Integer retIntResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retInt(myRetInt.getInInt());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetIntResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetIntResponse();
            _response.setRetIntResult(retIntResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetInt_RetIntResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetIntResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: RetUShort
     */
    private void invoke_RetUShort(StreamingHandlerState state) throws Exception {
        
        org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShort myRetUShort = null;
        Object myRetUShortObj =
            state.getRequest().getBody().getValue();
        
        if (myRetUShortObj instanceof SOAPDeserializationState) {
            myRetUShort = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShort)((SOAPDeserializationState)myRetUShortObj).getInstance();
        } else {
            myRetUShort = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShort)myRetUShortObj;
        }
        
        try {
            int retUShortResult = ((org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW) getTarget()).retUShort(myRetUShort.getInUShort());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShortResponse _response = new org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShortResponse();
            _response.setRetUShortResult(retUShortResult);
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUShort_RetUShortResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myRetUShortResponse_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_RetTimeSpan_RetTimeSpan_QNAME)) {
            state.getRequest().setOperationCode(RetTimeSpan_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetByteArray_RetByteArray_QNAME)) {
            state.getRequest().setOperationCode(RetByteArray_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetDouble_RetDouble_QNAME)) {
            state.getRequest().setOperationCode(RetDouble_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetByte_RetByte_QNAME)) {
            state.getRequest().setOperationCode(RetByte_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetLong_RetLong_QNAME)) {
            state.getRequest().setOperationCode(RetLong_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetFloat_RetFloat_QNAME)) {
            state.getRequest().setOperationCode(RetFloat_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetULong_RetULong_QNAME)) {
            state.getRequest().setOperationCode(RetULong_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetChar_RetChar_QNAME)) {
            state.getRequest().setOperationCode(RetChar_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetGuid_RetGuid_QNAME)) {
            state.getRequest().setOperationCode(RetGuid_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetSingle_RetSingle_QNAME)) {
            state.getRequest().setOperationCode(RetSingle_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetString_RetString_QNAME)) {
            state.getRequest().setOperationCode(RetString_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetQName_RetQName_QNAME)) {
            state.getRequest().setOperationCode(RetQName_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetDateTime_RetDateTime_QNAME)) {
            state.getRequest().setOperationCode(RetDateTime_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetDecimal_RetDecimal_QNAME)) {
            state.getRequest().setOperationCode(RetDecimal_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetUri_RetUri_QNAME)) {
            state.getRequest().setOperationCode(RetUri_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetUInt_RetUInt_QNAME)) {
            state.getRequest().setOperationCode(RetUInt_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetBool_RetBool_QNAME)) {
            state.getRequest().setOperationCode(RetBool_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetSByte_RetSByte_QNAME)) {
            state.getRequest().setOperationCode(RetSByte_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetShort_RetShort_QNAME)) {
            state.getRequest().setOperationCode(RetShort_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetObject_RetObject_QNAME)) {
            state.getRequest().setOperationCode(RetObject_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetInt_RetInt_QNAME)) {
            state.getRequest().setOperationCode(RetInt_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_RetUShort_RetUShort_QNAME)) {
            state.getRequest().setOperationCode(RetUShort_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case RetTimeSpan_OPCODE:
                deserialize_RetTimeSpan(bodyReader, deserializationContext, state);
                break;
            case RetByteArray_OPCODE:
                deserialize_RetByteArray(bodyReader, deserializationContext, state);
                break;
            case RetDouble_OPCODE:
                deserialize_RetDouble(bodyReader, deserializationContext, state);
                break;
            case RetByte_OPCODE:
                deserialize_RetByte(bodyReader, deserializationContext, state);
                break;
            case RetLong_OPCODE:
                deserialize_RetLong(bodyReader, deserializationContext, state);
                break;
            case RetFloat_OPCODE:
                deserialize_RetFloat(bodyReader, deserializationContext, state);
                break;
            case RetULong_OPCODE:
                deserialize_RetULong(bodyReader, deserializationContext, state);
                break;
            case RetChar_OPCODE:
                deserialize_RetChar(bodyReader, deserializationContext, state);
                break;
            case RetGuid_OPCODE:
                deserialize_RetGuid(bodyReader, deserializationContext, state);
                break;
            case RetSingle_OPCODE:
                deserialize_RetSingle(bodyReader, deserializationContext, state);
                break;
            case RetString_OPCODE:
                deserialize_RetString(bodyReader, deserializationContext, state);
                break;
            case RetQName_OPCODE:
                deserialize_RetQName(bodyReader, deserializationContext, state);
                break;
            case RetDateTime_OPCODE:
                deserialize_RetDateTime(bodyReader, deserializationContext, state);
                break;
            case RetDecimal_OPCODE:
                deserialize_RetDecimal(bodyReader, deserializationContext, state);
                break;
            case RetUri_OPCODE:
                deserialize_RetUri(bodyReader, deserializationContext, state);
                break;
            case RetUInt_OPCODE:
                deserialize_RetUInt(bodyReader, deserializationContext, state);
                break;
            case RetBool_OPCODE:
                deserialize_RetBool(bodyReader, deserializationContext, state);
                break;
            case RetSByte_OPCODE:
                deserialize_RetSByte(bodyReader, deserializationContext, state);
                break;
            case RetShort_OPCODE:
                deserialize_RetShort(bodyReader, deserializationContext, state);
                break;
            case RetObject_OPCODE:
                deserialize_RetObject(bodyReader, deserializationContext, state);
                break;
            case RetInt_OPCODE:
                deserialize_RetInt(bodyReader, deserializationContext, state);
                break;
            case RetUShort_OPCODE:
                deserialize_RetUShort(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the RetTimeSpan operation.
     */
    private void deserialize_RetTimeSpan(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetTimeSpanObj =
            ns1_myRetTimeSpan_LiteralSerializer.deserialize(ns1_RetTimeSpan_RetTimeSpan_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetTimeSpan_RetTimeSpan_QNAME);
        bodyBlock.setValue(myRetTimeSpanObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetByteArray operation.
     */
    private void deserialize_RetByteArray(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetByteArrayObj =
            ns1_myRetByteArray_LiteralSerializer.deserialize(ns1_RetByteArray_RetByteArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetByteArray_RetByteArray_QNAME);
        bodyBlock.setValue(myRetByteArrayObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetDouble operation.
     */
    private void deserialize_RetDouble(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetDoubleObj =
            ns1_myRetDouble_LiteralSerializer.deserialize(ns1_RetDouble_RetDouble_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDouble_RetDouble_QNAME);
        bodyBlock.setValue(myRetDoubleObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetByte operation.
     */
    private void deserialize_RetByte(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetByteObj =
            ns1_myRetByte_LiteralSerializer.deserialize(ns1_RetByte_RetByte_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetByte_RetByte_QNAME);
        bodyBlock.setValue(myRetByteObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetLong operation.
     */
    private void deserialize_RetLong(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetLongObj =
            ns1_myRetLong_LiteralSerializer.deserialize(ns1_RetLong_RetLong_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetLong_RetLong_QNAME);
        bodyBlock.setValue(myRetLongObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetFloat operation.
     */
    private void deserialize_RetFloat(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetFloatObj =
            ns1_myRetFloat_LiteralSerializer.deserialize(ns1_RetFloat_RetFloat_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetFloat_RetFloat_QNAME);
        bodyBlock.setValue(myRetFloatObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetULong operation.
     */
    private void deserialize_RetULong(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetULongObj =
            ns1_myRetULong_LiteralSerializer.deserialize(ns1_RetULong_RetULong_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetULong_RetULong_QNAME);
        bodyBlock.setValue(myRetULongObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetChar operation.
     */
    private void deserialize_RetChar(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetCharObj =
            ns1_myRetChar_LiteralSerializer.deserialize(ns1_RetChar_RetChar_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetChar_RetChar_QNAME);
        bodyBlock.setValue(myRetCharObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetGuid operation.
     */
    private void deserialize_RetGuid(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetGuidObj =
            ns1_myRetGuid_LiteralSerializer.deserialize(ns1_RetGuid_RetGuid_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetGuid_RetGuid_QNAME);
        bodyBlock.setValue(myRetGuidObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetSingle operation.
     */
    private void deserialize_RetSingle(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetSingleObj =
            ns1_myRetSingle_LiteralSerializer.deserialize(ns1_RetSingle_RetSingle_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetSingle_RetSingle_QNAME);
        bodyBlock.setValue(myRetSingleObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetString operation.
     */
    private void deserialize_RetString(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetStringObj =
            ns1_myRetString_LiteralSerializer.deserialize(ns1_RetString_RetString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetString_RetString_QNAME);
        bodyBlock.setValue(myRetStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetQName operation.
     */
    private void deserialize_RetQName(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetQNameObj =
            ns1_myRetQName_LiteralSerializer.deserialize(ns1_RetQName_RetQName_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetQName_RetQName_QNAME);
        bodyBlock.setValue(myRetQNameObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetDateTime operation.
     */
    private void deserialize_RetDateTime(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetDateTimeObj =
            ns1_myRetDateTime_LiteralSerializer.deserialize(ns1_RetDateTime_RetDateTime_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDateTime_RetDateTime_QNAME);
        bodyBlock.setValue(myRetDateTimeObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetDecimal operation.
     */
    private void deserialize_RetDecimal(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetDecimalObj =
            ns1_myRetDecimal_LiteralSerializer.deserialize(ns1_RetDecimal_RetDecimal_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetDecimal_RetDecimal_QNAME);
        bodyBlock.setValue(myRetDecimalObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetUri operation.
     */
    private void deserialize_RetUri(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetUriObj =
            ns1_myRetUri_LiteralSerializer.deserialize(ns1_RetUri_RetUri_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUri_RetUri_QNAME);
        bodyBlock.setValue(myRetUriObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetUInt operation.
     */
    private void deserialize_RetUInt(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetUIntObj =
            ns1_myRetUInt_LiteralSerializer.deserialize(ns1_RetUInt_RetUInt_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUInt_RetUInt_QNAME);
        bodyBlock.setValue(myRetUIntObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetBool operation.
     */
    private void deserialize_RetBool(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetBoolObj =
            ns1_myRetBool_LiteralSerializer.deserialize(ns1_RetBool_RetBool_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetBool_RetBool_QNAME);
        bodyBlock.setValue(myRetBoolObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetSByte operation.
     */
    private void deserialize_RetSByte(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetSByteObj =
            ns1_myRetSByte_LiteralSerializer.deserialize(ns1_RetSByte_RetSByte_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetSByte_RetSByte_QNAME);
        bodyBlock.setValue(myRetSByteObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetShort operation.
     */
    private void deserialize_RetShort(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetShortObj =
            ns1_myRetShort_LiteralSerializer.deserialize(ns1_RetShort_RetShort_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetShort_RetShort_QNAME);
        bodyBlock.setValue(myRetShortObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetObject operation.
     */
    private void deserialize_RetObject(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetObjectObj =
            ns1_myRetObject_LiteralSerializer.deserialize(ns1_RetObject_RetObject_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetObject_RetObject_QNAME);
        bodyBlock.setValue(myRetObjectObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetInt operation.
     */
    private void deserialize_RetInt(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetIntObj =
            ns1_myRetInt_LiteralSerializer.deserialize(ns1_RetInt_RetInt_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetInt_RetInt_QNAME);
        bodyBlock.setValue(myRetIntObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the RetUShort operation.
     */
    private void deserialize_RetUShort(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRetUShortObj =
            ns1_myRetUShort_LiteralSerializer.deserialize(ns1_RetUShort_RetUShort_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_RetUShort_RetUShort_QNAME);
        bodyBlock.setValue(myRetUShortObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case RetTimeSpan_OPCODE:
                invoke_RetTimeSpan(state);
                break;
            case RetByteArray_OPCODE:
                invoke_RetByteArray(state);
                break;
            case RetDouble_OPCODE:
                invoke_RetDouble(state);
                break;
            case RetByte_OPCODE:
                invoke_RetByte(state);
                break;
            case RetLong_OPCODE:
                invoke_RetLong(state);
                break;
            case RetFloat_OPCODE:
                invoke_RetFloat(state);
                break;
            case RetULong_OPCODE:
                invoke_RetULong(state);
                break;
            case RetChar_OPCODE:
                invoke_RetChar(state);
                break;
            case RetGuid_OPCODE:
                invoke_RetGuid(state);
                break;
            case RetSingle_OPCODE:
                invoke_RetSingle(state);
                break;
            case RetString_OPCODE:
                invoke_RetString(state);
                break;
            case RetQName_OPCODE:
                invoke_RetQName(state);
                break;
            case RetDateTime_OPCODE:
                invoke_RetDateTime(state);
                break;
            case RetDecimal_OPCODE:
                invoke_RetDecimal(state);
                break;
            case RetUri_OPCODE:
                invoke_RetUri(state);
                break;
            case RetUInt_OPCODE:
                invoke_RetUInt(state);
                break;
            case RetBool_OPCODE:
                invoke_RetBool(state);
                break;
            case RetSByte_OPCODE:
                invoke_RetSByte(state);
                break;
            case RetShort_OPCODE:
                invoke_RetShort(state);
                break;
            case RetObject_OPCODE:
                invoke_RetObject(state);
                break;
            case RetInt_OPCODE:
                invoke_RetInt(state);
                break;
            case RetUShort_OPCODE:
                invoke_RetUShort(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    protected java.lang.String getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public java.lang.String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_RetTimeSpan_RetTimeSpan_QNAME)) {
            return RetTimeSpan_OPCODE;
        }
        if (name.equals(ns1_RetByteArray_RetByteArray_QNAME)) {
            return RetByteArray_OPCODE;
        }
        if (name.equals(ns1_RetDouble_RetDouble_QNAME)) {
            return RetDouble_OPCODE;
        }
        if (name.equals(ns1_RetByte_RetByte_QNAME)) {
            return RetByte_OPCODE;
        }
        if (name.equals(ns1_RetLong_RetLong_QNAME)) {
            return RetLong_OPCODE;
        }
        if (name.equals(ns1_RetFloat_RetFloat_QNAME)) {
            return RetFloat_OPCODE;
        }
        if (name.equals(ns1_RetULong_RetULong_QNAME)) {
            return RetULong_OPCODE;
        }
        if (name.equals(ns1_RetChar_RetChar_QNAME)) {
            return RetChar_OPCODE;
        }
        if (name.equals(ns1_RetGuid_RetGuid_QNAME)) {
            return RetGuid_OPCODE;
        }
        if (name.equals(ns1_RetSingle_RetSingle_QNAME)) {
            return RetSingle_OPCODE;
        }
        if (name.equals(ns1_RetString_RetString_QNAME)) {
            return RetString_OPCODE;
        }
        if (name.equals(ns1_RetQName_RetQName_QNAME)) {
            return RetQName_OPCODE;
        }
        if (name.equals(ns1_RetDateTime_RetDateTime_QNAME)) {
            return RetDateTime_OPCODE;
        }
        if (name.equals(ns1_RetDecimal_RetDecimal_QNAME)) {
            return RetDecimal_OPCODE;
        }
        if (name.equals(ns1_RetUri_RetUri_QNAME)) {
            return RetUri_OPCODE;
        }
        if (name.equals(ns1_RetUInt_RetUInt_QNAME)) {
            return RetUInt_OPCODE;
        }
        if (name.equals(ns1_RetBool_RetBool_QNAME)) {
            return RetBool_OPCODE;
        }
        if (name.equals(ns1_RetSByte_RetSByte_QNAME)) {
            return RetSByte_OPCODE;
        }
        if (name.equals(ns1_RetShort_RetShort_QNAME)) {
            return RetShort_OPCODE;
        }
        if (name.equals(ns1_RetObject_RetObject_QNAME)) {
            return RetObject_OPCODE;
        }
        if (name.equals(ns1_RetInt_RetInt_QNAME)) {
            return RetInt_OPCODE;
        }
        if (name.equals(ns1_RetUShort_RetUShort_QNAME)) {
            return RetUShort_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case RetTimeSpan_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retTimeSpan", carray);
                }
                break;
            
            case RetByteArray_OPCODE:
                {
                    Class[] carray = { Class.forName("[B") };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retByteArray", carray);
                }
                break;
            
            case RetDouble_OPCODE:
                {
                    Class[] carray = { java.lang.Double.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retDouble", carray);
                }
                break;
            
            case RetByte_OPCODE:
                {
                    Class[] carray = { Short.TYPE };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retByte", carray);
                }
                break;
            
            case RetLong_OPCODE:
                {
                    Class[] carray = { java.lang.Long.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retLong", carray);
                }
                break;
            
            case RetFloat_OPCODE:
                {
                    Class[] carray = { java.lang.Float.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retFloat", carray);
                }
                break;
            
            case RetULong_OPCODE:
                {
                    Class[] carray = { java.math.BigInteger.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retULong", carray);
                }
                break;
            
            case RetChar_OPCODE:
                {
                    Class[] carray = { java.lang.Integer.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retChar", carray);
                }
                break;
            
            case RetGuid_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retGuid", carray);
                }
                break;
            
            case RetSingle_OPCODE:
                {
                    Class[] carray = { java.lang.Float.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retSingle", carray);
                }
                break;
            
            case RetString_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retString", carray);
                }
                break;
            
            case RetQName_OPCODE:
                {
                    Class[] carray = { javax.xml.namespace.QName.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retQName", carray);
                }
                break;
            
            case RetDateTime_OPCODE:
                {
                    Class[] carray = { java.util.Calendar.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retDateTime", carray);
                }
                break;
            
            case RetDecimal_OPCODE:
                {
                    Class[] carray = { java.math.BigDecimal.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retDecimal", carray);
                }
                break;
            
            case RetUri_OPCODE:
                {
                    Class[] carray = { java.net.URI.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retUri", carray);
                }
                break;
            
            case RetUInt_OPCODE:
                {
                    Class[] carray = { Long.TYPE };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retUInt", carray);
                }
                break;
            
            case RetBool_OPCODE:
                {
                    Class[] carray = { java.lang.Boolean.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retBool", carray);
                }
                break;
            
            case RetSByte_OPCODE:
                {
                    Class[] carray = { java.lang.Byte.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retSByte", carray);
                }
                break;
            
            case RetShort_OPCODE:
                {
                    Class[] carray = { java.lang.Short.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retShort", carray);
                }
                break;
            
            case RetObject_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retObject", carray);
                }
                break;
            
            case RetInt_OPCODE:
                {
                    Class[] carray = { java.lang.Integer.class };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retInt", carray);
                }
                break;
            
            case RetUShort_OPCODE:
                {
                    Class[] carray = { Integer.TYPE };
                    theMethod = (org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.IBaseDataTypesDocLitW.class).getMethod("retUShort", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[22];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 22 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myRetShort_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShort.class, ns1_RetShort_TYPE_QNAME);
        ns1_myRetString_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetString.class, ns1_RetString_TYPE_QNAME);
        ns1_myRetTimeSpan_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpan.class, ns1_RetTimeSpan_TYPE_QNAME);
        ns1_myRetUriResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUriResponse.class, ns1_RetUriResponse_TYPE_QNAME);
        ns1_myRetBool_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBool.class, ns1_RetBool_TYPE_QNAME);
        ns1_myRetIntResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetIntResponse.class, ns1_RetIntResponse_TYPE_QNAME);
        ns1_myRetTimeSpanResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetTimeSpanResponse.class, ns1_RetTimeSpanResponse_TYPE_QNAME);
        ns1_myRetDouble_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDouble.class, ns1_RetDouble_TYPE_QNAME);
        ns1_myRetByte_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByte.class, ns1_RetByte_TYPE_QNAME);
        ns1_myRetLong_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLong.class, ns1_RetLong_TYPE_QNAME);
        ns1_myRetByteArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArray.class, ns1_RetByteArray_TYPE_QNAME);
        ns1_myRetGuid_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuid.class, ns1_RetGuid_TYPE_QNAME);
        ns1_myRetULongResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULongResponse.class, ns1_RetULongResponse_TYPE_QNAME);
        ns1_myRetDecimalResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimalResponse.class, ns1_RetDecimalResponse_TYPE_QNAME);
        ns1_myRetBoolResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetBoolResponse.class, ns1_RetBoolResponse_TYPE_QNAME);
        ns1_myRetDecimal_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDecimal.class, ns1_RetDecimal_TYPE_QNAME);
        ns1_myRetDateTimeResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTimeResponse.class, ns1_RetDateTimeResponse_TYPE_QNAME);
        ns1_myRetLongResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetLongResponse.class, ns1_RetLongResponse_TYPE_QNAME);
        ns1_myRetObject_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObject.class, ns1_RetObject_TYPE_QNAME);
        ns1_myRetUShortResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShortResponse.class, ns1_RetUShortResponse_TYPE_QNAME);
        ns1_myRetSByteResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByteResponse.class, ns1_RetSByteResponse_TYPE_QNAME);
        ns1_myRetFloatResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloatResponse.class, ns1_RetFloatResponse_TYPE_QNAME);
        ns1_myRetDateTime_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDateTime.class, ns1_RetDateTime_TYPE_QNAME);
        ns1_myRetSByte_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSByte.class, ns1_RetSByte_TYPE_QNAME);
        ns1_myRetQName_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQName.class, ns1_RetQName_TYPE_QNAME);
        ns1_myRetUShort_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUShort.class, ns1_RetUShort_TYPE_QNAME);
        ns1_myRetGuidResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetGuidResponse.class, ns1_RetGuidResponse_TYPE_QNAME);
        ns1_myRetByteResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteResponse.class, ns1_RetByteResponse_TYPE_QNAME);
        ns1_myRetCharResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetCharResponse.class, ns1_RetCharResponse_TYPE_QNAME);
        ns1_myRetObjectResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetObjectResponse.class, ns1_RetObjectResponse_TYPE_QNAME);
        ns1_myRetDoubleResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetDoubleResponse.class, ns1_RetDoubleResponse_TYPE_QNAME);
        ns1_myRetUIntResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUIntResponse.class, ns1_RetUIntResponse_TYPE_QNAME);
        ns1_myRetChar_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetChar.class, ns1_RetChar_TYPE_QNAME);
        ns1_myRetULong_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetULong.class, ns1_RetULong_TYPE_QNAME);
        ns1_myRetUInt_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUInt.class, ns1_RetUInt_TYPE_QNAME);
        ns1_myRetByteArrayResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetByteArrayResponse.class, ns1_RetByteArrayResponse_TYPE_QNAME);
        ns1_myRetSingle_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingle.class, ns1_RetSingle_TYPE_QNAME);
        ns1_myRetUri_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetUri.class, ns1_RetUri_TYPE_QNAME);
        ns1_myRetQNameResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetQNameResponse.class, ns1_RetQNameResponse_TYPE_QNAME);
        ns1_myRetInt_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetInt.class, ns1_RetInt_TYPE_QNAME);
        ns1_myRetSingleResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetSingleResponse.class, ns1_RetSingleResponse_TYPE_QNAME);
        ns1_myRetFloat_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetFloat.class, ns1_RetFloat_TYPE_QNAME);
        ns1_myRetShortResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetShortResponse.class, ns1_RetShortResponse_TYPE_QNAME);
        ns1_myRetStringResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.jboss.test.ws.interop.microsoft.soapwsdl.BaseDataTypesDocLitW_Service.RetStringResponse.class, ns1_RetStringResponse_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName portName = new QName("http://tempuri.org/", "BasicHttpBinding_IBaseDataTypesDocLitW");
    private static final int RetTimeSpan_OPCODE = 0;
    private static final int RetByteArray_OPCODE = 1;
    private static final int RetDouble_OPCODE = 2;
    private static final int RetByte_OPCODE = 3;
    private static final int RetLong_OPCODE = 4;
    private static final int RetFloat_OPCODE = 5;
    private static final int RetULong_OPCODE = 6;
    private static final int RetChar_OPCODE = 7;
    private static final int RetGuid_OPCODE = 8;
    private static final int RetSingle_OPCODE = 9;
    private static final int RetString_OPCODE = 10;
    private static final int RetQName_OPCODE = 11;
    private static final int RetDateTime_OPCODE = 12;
    private static final int RetDecimal_OPCODE = 13;
    private static final int RetUri_OPCODE = 14;
    private static final int RetUInt_OPCODE = 15;
    private static final int RetBool_OPCODE = 16;
    private static final int RetSByte_OPCODE = 17;
    private static final int RetShort_OPCODE = 18;
    private static final int RetObject_OPCODE = 19;
    private static final int RetInt_OPCODE = 20;
    private static final int RetUShort_OPCODE = 21;
    private static final javax.xml.namespace.QName ns1_RetTimeSpan_RetTimeSpan_QNAME = new QName("http://tempuri.org/", "RetTimeSpan");
    private static final javax.xml.namespace.QName ns1_RetTimeSpan_TYPE_QNAME = new QName("http://tempuri.org/", "RetTimeSpan");
    private CombinedSerializer ns1_myRetTimeSpan_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetTimeSpan_RetTimeSpanResponse_QNAME = new QName("http://tempuri.org/", "RetTimeSpanResponse");
    private static final javax.xml.namespace.QName ns1_RetTimeSpanResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetTimeSpanResponse");
    private CombinedSerializer ns1_myRetTimeSpanResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetByteArray_RetByteArray_QNAME = new QName("http://tempuri.org/", "RetByteArray");
    private static final javax.xml.namespace.QName ns1_RetByteArray_TYPE_QNAME = new QName("http://tempuri.org/", "RetByteArray");
    private CombinedSerializer ns1_myRetByteArray_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetByteArray_RetByteArrayResponse_QNAME = new QName("http://tempuri.org/", "RetByteArrayResponse");
    private static final javax.xml.namespace.QName ns1_RetByteArrayResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetByteArrayResponse");
    private CombinedSerializer ns1_myRetByteArrayResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetDouble_RetDouble_QNAME = new QName("http://tempuri.org/", "RetDouble");
    private static final javax.xml.namespace.QName ns1_RetDouble_TYPE_QNAME = new QName("http://tempuri.org/", "RetDouble");
    private CombinedSerializer ns1_myRetDouble_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetDouble_RetDoubleResponse_QNAME = new QName("http://tempuri.org/", "RetDoubleResponse");
    private static final javax.xml.namespace.QName ns1_RetDoubleResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetDoubleResponse");
    private CombinedSerializer ns1_myRetDoubleResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetByte_RetByte_QNAME = new QName("http://tempuri.org/", "RetByte");
    private static final javax.xml.namespace.QName ns1_RetByte_TYPE_QNAME = new QName("http://tempuri.org/", "RetByte");
    private CombinedSerializer ns1_myRetByte_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetByte_RetByteResponse_QNAME = new QName("http://tempuri.org/", "RetByteResponse");
    private static final javax.xml.namespace.QName ns1_RetByteResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetByteResponse");
    private CombinedSerializer ns1_myRetByteResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetLong_RetLong_QNAME = new QName("http://tempuri.org/", "RetLong");
    private static final javax.xml.namespace.QName ns1_RetLong_TYPE_QNAME = new QName("http://tempuri.org/", "RetLong");
    private CombinedSerializer ns1_myRetLong_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetLong_RetLongResponse_QNAME = new QName("http://tempuri.org/", "RetLongResponse");
    private static final javax.xml.namespace.QName ns1_RetLongResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetLongResponse");
    private CombinedSerializer ns1_myRetLongResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetFloat_RetFloat_QNAME = new QName("http://tempuri.org/", "RetFloat");
    private static final javax.xml.namespace.QName ns1_RetFloat_TYPE_QNAME = new QName("http://tempuri.org/", "RetFloat");
    private CombinedSerializer ns1_myRetFloat_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetFloat_RetFloatResponse_QNAME = new QName("http://tempuri.org/", "RetFloatResponse");
    private static final javax.xml.namespace.QName ns1_RetFloatResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetFloatResponse");
    private CombinedSerializer ns1_myRetFloatResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetULong_RetULong_QNAME = new QName("http://tempuri.org/", "RetULong");
    private static final javax.xml.namespace.QName ns1_RetULong_TYPE_QNAME = new QName("http://tempuri.org/", "RetULong");
    private CombinedSerializer ns1_myRetULong_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetULong_RetULongResponse_QNAME = new QName("http://tempuri.org/", "RetULongResponse");
    private static final javax.xml.namespace.QName ns1_RetULongResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetULongResponse");
    private CombinedSerializer ns1_myRetULongResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetChar_RetChar_QNAME = new QName("http://tempuri.org/", "RetChar");
    private static final javax.xml.namespace.QName ns1_RetChar_TYPE_QNAME = new QName("http://tempuri.org/", "RetChar");
    private CombinedSerializer ns1_myRetChar_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetChar_RetCharResponse_QNAME = new QName("http://tempuri.org/", "RetCharResponse");
    private static final javax.xml.namespace.QName ns1_RetCharResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetCharResponse");
    private CombinedSerializer ns1_myRetCharResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetGuid_RetGuid_QNAME = new QName("http://tempuri.org/", "RetGuid");
    private static final javax.xml.namespace.QName ns1_RetGuid_TYPE_QNAME = new QName("http://tempuri.org/", "RetGuid");
    private CombinedSerializer ns1_myRetGuid_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetGuid_RetGuidResponse_QNAME = new QName("http://tempuri.org/", "RetGuidResponse");
    private static final javax.xml.namespace.QName ns1_RetGuidResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetGuidResponse");
    private CombinedSerializer ns1_myRetGuidResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetSingle_RetSingle_QNAME = new QName("http://tempuri.org/", "RetSingle");
    private static final javax.xml.namespace.QName ns1_RetSingle_TYPE_QNAME = new QName("http://tempuri.org/", "RetSingle");
    private CombinedSerializer ns1_myRetSingle_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetSingle_RetSingleResponse_QNAME = new QName("http://tempuri.org/", "RetSingleResponse");
    private static final javax.xml.namespace.QName ns1_RetSingleResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetSingleResponse");
    private CombinedSerializer ns1_myRetSingleResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetString_RetString_QNAME = new QName("http://tempuri.org/", "RetString");
    private static final javax.xml.namespace.QName ns1_RetString_TYPE_QNAME = new QName("http://tempuri.org/", "RetString");
    private CombinedSerializer ns1_myRetString_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetString_RetStringResponse_QNAME = new QName("http://tempuri.org/", "RetStringResponse");
    private static final javax.xml.namespace.QName ns1_RetStringResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetStringResponse");
    private CombinedSerializer ns1_myRetStringResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetQName_RetQName_QNAME = new QName("http://tempuri.org/", "RetQName");
    private static final javax.xml.namespace.QName ns1_RetQName_TYPE_QNAME = new QName("http://tempuri.org/", "RetQName");
    private CombinedSerializer ns1_myRetQName_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetQName_RetQNameResponse_QNAME = new QName("http://tempuri.org/", "RetQNameResponse");
    private static final javax.xml.namespace.QName ns1_RetQNameResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetQNameResponse");
    private CombinedSerializer ns1_myRetQNameResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetDateTime_RetDateTime_QNAME = new QName("http://tempuri.org/", "RetDateTime");
    private static final javax.xml.namespace.QName ns1_RetDateTime_TYPE_QNAME = new QName("http://tempuri.org/", "RetDateTime");
    private CombinedSerializer ns1_myRetDateTime_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetDateTime_RetDateTimeResponse_QNAME = new QName("http://tempuri.org/", "RetDateTimeResponse");
    private static final javax.xml.namespace.QName ns1_RetDateTimeResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetDateTimeResponse");
    private CombinedSerializer ns1_myRetDateTimeResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetDecimal_RetDecimal_QNAME = new QName("http://tempuri.org/", "RetDecimal");
    private static final javax.xml.namespace.QName ns1_RetDecimal_TYPE_QNAME = new QName("http://tempuri.org/", "RetDecimal");
    private CombinedSerializer ns1_myRetDecimal_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetDecimal_RetDecimalResponse_QNAME = new QName("http://tempuri.org/", "RetDecimalResponse");
    private static final javax.xml.namespace.QName ns1_RetDecimalResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetDecimalResponse");
    private CombinedSerializer ns1_myRetDecimalResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetUri_RetUri_QNAME = new QName("http://tempuri.org/", "RetUri");
    private static final javax.xml.namespace.QName ns1_RetUri_TYPE_QNAME = new QName("http://tempuri.org/", "RetUri");
    private CombinedSerializer ns1_myRetUri_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetUri_RetUriResponse_QNAME = new QName("http://tempuri.org/", "RetUriResponse");
    private static final javax.xml.namespace.QName ns1_RetUriResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetUriResponse");
    private CombinedSerializer ns1_myRetUriResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetUInt_RetUInt_QNAME = new QName("http://tempuri.org/", "RetUInt");
    private static final javax.xml.namespace.QName ns1_RetUInt_TYPE_QNAME = new QName("http://tempuri.org/", "RetUInt");
    private CombinedSerializer ns1_myRetUInt_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetUInt_RetUIntResponse_QNAME = new QName("http://tempuri.org/", "RetUIntResponse");
    private static final javax.xml.namespace.QName ns1_RetUIntResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetUIntResponse");
    private CombinedSerializer ns1_myRetUIntResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetBool_RetBool_QNAME = new QName("http://tempuri.org/", "RetBool");
    private static final javax.xml.namespace.QName ns1_RetBool_TYPE_QNAME = new QName("http://tempuri.org/", "RetBool");
    private CombinedSerializer ns1_myRetBool_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetBool_RetBoolResponse_QNAME = new QName("http://tempuri.org/", "RetBoolResponse");
    private static final javax.xml.namespace.QName ns1_RetBoolResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetBoolResponse");
    private CombinedSerializer ns1_myRetBoolResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetSByte_RetSByte_QNAME = new QName("http://tempuri.org/", "RetSByte");
    private static final javax.xml.namespace.QName ns1_RetSByte_TYPE_QNAME = new QName("http://tempuri.org/", "RetSByte");
    private CombinedSerializer ns1_myRetSByte_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetSByte_RetSByteResponse_QNAME = new QName("http://tempuri.org/", "RetSByteResponse");
    private static final javax.xml.namespace.QName ns1_RetSByteResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetSByteResponse");
    private CombinedSerializer ns1_myRetSByteResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetShort_RetShort_QNAME = new QName("http://tempuri.org/", "RetShort");
    private static final javax.xml.namespace.QName ns1_RetShort_TYPE_QNAME = new QName("http://tempuri.org/", "RetShort");
    private CombinedSerializer ns1_myRetShort_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetShort_RetShortResponse_QNAME = new QName("http://tempuri.org/", "RetShortResponse");
    private static final javax.xml.namespace.QName ns1_RetShortResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetShortResponse");
    private CombinedSerializer ns1_myRetShortResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetObject_RetObject_QNAME = new QName("http://tempuri.org/", "RetObject");
    private static final javax.xml.namespace.QName ns1_RetObject_TYPE_QNAME = new QName("http://tempuri.org/", "RetObject");
    private CombinedSerializer ns1_myRetObject_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetObject_RetObjectResponse_QNAME = new QName("http://tempuri.org/", "RetObjectResponse");
    private static final javax.xml.namespace.QName ns1_RetObjectResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetObjectResponse");
    private CombinedSerializer ns1_myRetObjectResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetInt_RetInt_QNAME = new QName("http://tempuri.org/", "RetInt");
    private static final javax.xml.namespace.QName ns1_RetInt_TYPE_QNAME = new QName("http://tempuri.org/", "RetInt");
    private CombinedSerializer ns1_myRetInt_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetInt_RetIntResponse_QNAME = new QName("http://tempuri.org/", "RetIntResponse");
    private static final javax.xml.namespace.QName ns1_RetIntResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetIntResponse");
    private CombinedSerializer ns1_myRetIntResponse_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetUShort_RetUShort_QNAME = new QName("http://tempuri.org/", "RetUShort");
    private static final javax.xml.namespace.QName ns1_RetUShort_TYPE_QNAME = new QName("http://tempuri.org/", "RetUShort");
    private CombinedSerializer ns1_myRetUShort_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_RetUShort_RetUShortResponse_QNAME = new QName("http://tempuri.org/", "RetUShortResponse");
    private static final javax.xml.namespace.QName ns1_RetUShortResponse_TYPE_QNAME = new QName("http://tempuri.org/", "RetUShortResponse");
    private CombinedSerializer ns1_myRetUShortResponse_LiteralSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://tempuri.org/"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
